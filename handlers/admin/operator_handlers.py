from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import dp
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from database.db import get_operators, delete_operator_by_telegram_id, update_operator, add_operator
from keyboards.main_menu import operator_edit_menu, operator_management_menu, get_main_menu
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types.message import ContentType
from aiogram.utils import executor

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
class AddOperatorState(StatesGroup):
    TelegramID = State()
    Name = State()
    WorkHours = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
class EditOperatorState(StatesGroup):
    SelectField = State()  # –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    EnterValue = State()   # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    EditingName = State()  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏
    EditingWorkHours = State()  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
class OperatorStatusState(StatesGroup):
    selecting_operator = State()
    confirming_status_change = State()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
def generate_operator_status_keyboard(operators):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for operator in operators:
        operator_id, name, _, status, _ = operator
        button_text = f"{name} ({status})"
        keyboard.add(KeyboardButton(button_text))
    keyboard.add("–ù–∞–∑–∞–¥")
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
def confirm_status_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add("–î–∞", "–ù–∞–∑–∞–¥")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
async def change_operator_status_start(message: types.Message):
    operators = get_operators()
    if not operators:
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    keyboard = generate_operator_status_keyboard(operators)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=keyboard)
    await OperatorStatusState.selecting_operator.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(state=OperatorStatusState.selecting_operator, content_types=ContentType.TEXT)
async def select_operator(message: types.Message, state: FSMContext):
    selected_text = message.text
    if selected_text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.", reply_markup=operator_management_menu())
        return

    operators = get_operators()
    selected_operator = next((op for op in operators if f"{op[1]} ({op[3]})" == selected_text), None)

    if not selected_operator:
        await message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    operator_id, name, _, status, _ = selected_operator
    new_status = "inactive" if status == "active" else "active"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(operator_id=operator_id, new_status=new_status)

    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {name} —Å '{status}' –Ω–∞ '{new_status}'?",
        reply_markup=confirm_status_keyboard()
    )
    await OperatorStatusState.confirming_status_change.set()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@dp.message_handler(state=OperatorStatusState.confirming_status_change, content_types=ContentType.TEXT)
async def confirm_status_change(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await OperatorStatusState.selecting_operator.set()
        operators = get_operators()
        keyboard = generate_operator_status_keyboard(operators)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=keyboard)
        return

    if message.text != "–î–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    operator_id = data.get("operator_id")
    new_status = data.get("new_status")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    update_operator(operator_id, status=new_status)

    await state.finish()
    await message.answer(
        "–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.",
        reply_markup=operator_management_menu()
    )

# –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
@dp.message_handler(lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏")
async def manage_operators(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=operator_management_menu())

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
async def show_operators(message: types.Message):
    operators = get_operators()
    if operators:
        for op in operators:
            operator_info = (
                f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ</b>:\n"
                f"üîπ <b>ID:</b> {op[0]}\n"
                f"üë§ <b>–ò–º—è:</b> {op[1]}\n"
                f"üÜî <b>Telegram ID:</b> {op[2]}\n"
                f"‚öôÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if op[3] == 'active' else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                f"‚è∞ <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> {op[4]}"
            )
            await message.reply(operator_info, parse_mode="HTML")
    else:
        await message.reply("‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
# –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
async def add_operator_start(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:")
    await AddOperatorState.TelegramID.set()

@dp.message_handler(state=AddOperatorState.TelegramID)
async def add_operator_get_name(message: types.Message, state: FSMContext):
    try:
        telegram_id = int(message.text)
        await state.update_data(telegram_id=telegram_id)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:")
        await AddOperatorState.Name.set()
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(state=AddOperatorState.Name)
async def add_operator_get_work_hours(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00-18:00):")
    await AddOperatorState.WorkHours.set()

@dp.message_handler(state=AddOperatorState.WorkHours)
async def add_operator_finish(message: types.Message, state: FSMContext):
    work_hours = message.text
    data = await state.get_data()
    telegram_id = data['telegram_id']
    name = data['name']
    try:
        add_operator(telegram_id, name, work_hours)
        await message.reply("–û–ø–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=operator_management_menu())
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}", reply_markup=operator_management_menu())
    await state.finish()


# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
async def edit_operator_prompt(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await EditOperatorState.SelectField.set()

@dp.message_handler(state=EditOperatorState.SelectField)
async def select_operator_to_edit(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    operator_id = int(message.text)
    await state.update_data(operator_id=operator_id)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=operator_edit_menu())
    await EditOperatorState.EnterValue.set()


@dp.message_handler(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", state=EditOperatorState.EnterValue)
async def change_operator_name_start(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        operator_id = data.get("operator_id")
        if not operator_id:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.")
            return
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:")
    await EditOperatorState.EditingName.set()


@dp.message_handler(state=EditOperatorState.EditingName)
async def update_operator_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        operator_id = data.get("operator_id")
    new_name = message.text

    try:
        update_operator(operator_id, name_screen=new_name)
        await message.reply("‚úÖ –ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=operator_management_menu())
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")

    await state.finish()

@dp.message_handler(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã", state=EditOperatorState.EnterValue)
async def change_operator_work_hours_start(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        operator_id = data.get("operator_id")
        if not operator_id:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.")
            return
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00-18:00):")
    await EditOperatorState.EditingWorkHours.set()


@dp.message_handler(state=EditOperatorState.EditingWorkHours)
async def update_operator_work_hours(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        operator_id = data.get("operator_id")
    new_work_hours = message.text

    try:
        update_operator(operator_id, work_hours=new_work_hours)
        await message.reply("‚úÖ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=operator_management_menu())
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã: {e}")

    await state.finish()

@dp.message_handler(state=EditOperatorState.EnterValue)
async def process_field_to_edit(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        operator_id = data.get("operator_id")
        field = data.get("field")

        if field == "status":
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=status_selection_keyboard())
        else:
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

@dp.message_handler(lambda message: message.text in ["üü¢ Active", "üî¥ Inactive", "‚ùå –û—Ç–º–µ–Ω–∞"], state=EditOperatorState.EnterValue)
async def process_status_change(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
        return

    async with state.proxy() as data:
        operator_id = data.get("operator_id")
        new_status = "active" if message.text == "üü¢ Active" else "inactive"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
        try:
            update_operator(operator_id, status=new_status)
            await message.reply(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {new_status}", reply_markup=types.ReplyKeyboardRemove())
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}", reply_markup=types.ReplyKeyboardRemove())
        finally:
            await state.finish()

# –£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
async def delete_operator_prompt(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")

@dp.message_handler(lambda message: message.text.isdigit())
async def confirm_delete_operator(message: types.Message):
    telegram_id = int(message.text)
    try:
        success = delete_operator_by_telegram_id(telegram_id)
        if success:
            await message.reply("‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=operator_management_menu())
        else:
            await message.reply("‚ùó –û–ø–µ—Ä–∞—Ç–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=operator_management_menu())
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=operator_management_menu())

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await message.reply("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())

