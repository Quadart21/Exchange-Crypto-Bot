# handlers/admin_requisites.py
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import dp
from database.db import get_all_requisites, add_requisite, delete_requisite, update_requisite
from keyboards.main_menu import get_back_menu, admin_panel_menu
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

class RequisiteFSM(StatesGroup):
    type = State()
    label = State()
    details = State()
    choose_id_to_edit = State()
    new_details = State()
    choose_id_to_delete = State()


@dp.message_handler(lambda msg: msg.text in ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –ù–∞–∑–∞–¥", "–ù–∞–∑–∞–¥"])
async def to_admin_menu(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_panel_menu())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
@dp.message_handler(lambda msg: msg.text == "–ö–æ—à–µ–ª—å–∫–∏")
async def requisites_menu(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç", "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç")
    kb.add("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# –î–æ–±–∞–≤–∏—Ç—å
@dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç")
async def add_req_start(message: types.Message):
    await RequisiteFSM.type.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø (fiat / crypto):", reply_markup=get_back_menu())

@dp.message_handler(state=RequisiteFSM.type)
async def add_req_type(message: types.Message, state: FSMContext):
    await state.update_data(type=message.text)
    await RequisiteFSM.label.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞:")

@dp.message_handler(state=RequisiteFSM.label)
async def add_req_label(message: types.Message, state: FSMContext):
    await state.update_data(label=message.text)
    await RequisiteFSM.details.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞:")

@dp.message_handler(state=RequisiteFSM.details)
async def add_req_save(message: types.Message, state: FSMContext):
    data = await state.get_data()
    add_requisite(data["type"], data["label"], message.text)
    await state.finish()
    await message.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")

# –ò–∑–º–µ–Ω–∏—Ç—å
@dp.message_handler(lambda msg: msg.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç")
async def edit_req_list(message: types.Message):
    reqs = get_all_requisites()
    if not reqs:
        return await message.answer("–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.")
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for r in reqs:
        kb.add(f"{r[0]} | {r[1]} | {r[2]}")
    kb.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –ø–æ ID:", reply_markup=kb)
    await RequisiteFSM.choose_id_to_edit.set()

@dp.message_handler(state=RequisiteFSM.choose_id_to_edit)
async def edit_req_enter(message: types.Message, state: FSMContext):
    rid = message.text.split()[0]
    await state.update_data(edit_id=int(rid))
    await RequisiteFSM.new_details.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:")

@dp.message_handler(state=RequisiteFSM.new_details)
async def edit_req_save(message: types.Message, state: FSMContext):
    data = await state.get_data()
    update_requisite(data["edit_id"], message.text)
    await state.finish()
    await message.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")

# –£–¥–∞–ª–∏—Ç—å
@dp.message_handler(lambda msg: msg.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç")
async def delete_req_list(message: types.Message):
    reqs = get_all_requisites()
    if not reqs:
        return await message.answer("–ù–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.")
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for r in reqs:
        kb.add(f"{r[0]} | {r[1]} | {r[2]}")
    kb.add("üîô –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await RequisiteFSM.choose_id_to_delete.set()

@dp.message_handler(state=RequisiteFSM.choose_id_to_delete)
async def delete_req_confirm(message: types.Message, state: FSMContext):
    rid = message.text.split()[0]
    delete_requisite(int(rid))
    await state.finish()
    await message.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç —É–¥–∞–ª—ë–Ω.")
