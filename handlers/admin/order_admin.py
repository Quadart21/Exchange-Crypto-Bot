from aiogram import types
from config import dp, bot
from keyboards.main_menu import get_main_menu
from database.db import get_active_orders, get_order_by_id, get_requisites_by_operator, update_order_status
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.db import create_connection
from heleket_api import get_invoice_status  # –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ API
from aiogram.utils.markdown import escape_md

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
class RejectOrderStates(StatesGroup):
    waiting_for_reason = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –∑–∞—è–≤–∫–æ–π
def create_action_keyboard(order_id):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(f"–û–¥–æ–±—Ä–∏—Ç—å #{order_id}"))
    keyboard.add(KeyboardButton(f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å #{order_id}"))
    keyboard.add(KeyboardButton(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å #{order_id}"))
    keyboard.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
@dp.message_handler(lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫")
async def show_active_orders(message: types.Message):
    orders = get_active_orders()
    if orders:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        for order in orders:
            order_id = order[0]
            button_text = f"New #{order_id}: {order[2]}, {order[3]} {order[4]}"
            keyboard.add(KeyboardButton(button_text))
        keyboard.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        await message.reply("üîî *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:*", parse_mode="Markdown", reply_markup=keyboard)
    else:
        await message.reply("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.", reply_markup=get_main_menu(message.from_user.id))

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏
@dp.message_handler(lambda message: message.text.startswith("New #"))
async def view_order(message: types.Message):
    try:
        order_id = int(message.text.split("#")[1].strip().split(":")[0])
        order_data = get_order_by_id(order_id, is_admin=True)
        if order_data:
            conn = create_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT type, label, details FROM requisites")
            rows = cursor.fetchall()
            conn.close()

            def line(label, details):
                return f"- {label}: {details}"

            fiat_requisites = "\n".join([
                line(label, details)
                for (typ, label, details) in rows if typ == "fiat"
            ]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            crypto_requisites = "\n".join([
                line(label, details)
                for (typ, label, details) in rows if typ == "crypto"
            ]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            screenshot_id = None
            clean_details_lines = []
            for line_text in order_data['details'].split("\n") if order_data['details'] else []:
                if line_text.startswith("–°–∫—Ä–∏–Ω—à–æ—Ç:"):
                    screenshot_id = line_text.split("–°–∫—Ä–∏–Ω—à–æ—Ç:")[-1].strip()
                else:
                    clean_details_lines.append(line_text)
            clean_details = "\n".join(clean_details_lines)

            currency = order_data['currency']
            status = order_data['status']
            created_at = order_data.get("created_at", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            order_type = order_data['type']
            rate = order_data.get('rate', '‚Äî')

            if order_type == "sell":
                response = (
                    f"üìÑ –ó–ê–Ø–í–ö–ê –ù–ê –ü–†–û–î–ê–ñ–£ #{order_data['id']}:\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_data['user_id']}\n"
                    f"üí± –¢–æ–∫–µ–Ω: {currency}\n"
                    f"üí∞ –ö–æ–ª-–≤–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {order_data['amount']}\n"
                    f"üìà –ö—É—Ä—Å: {rate} BYN\n"
                    f"üíµ –°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {order_data['total']} BYN\n\n"
                    f"üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{clean_details}\n\n"
                    f"üìà –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n\n"
                    f"üí≥ –ù–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                    f"–§–∏–∞—Ç:\n{fiat_requisites}\n"
                    f"–ö—Ä–∏–ø—Ç–æ:\n{crypto_requisites}"
                )
            else:
                response = (
                    f"üìÑ –ó–ê–Ø–í–ö–ê –ù–ê –ü–û–ö–£–ü–ö–£ #{order_data['id']}:\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_data['user_id']}\n"
                    f"üíµ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {order_data['total']} BYN\n"
                    f"üí± –¢–æ–∫–µ–Ω: {currency}\n"
                    f"üîÑ –ö–æ–ª-–≤–æ –∫ –≤—ã–¥–∞—á–µ: {order_data['amount']}\n"
                    f"üìà –ö—É—Ä—Å: {rate} BYN\n\n"
                    f"üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{clean_details}\n\n"
                    f"üìà –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n\n"
                    f"üí≥ –ù–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                    f"–§–∏–∞—Ç:\n{fiat_requisites}\n"
                    f"–ö—Ä–∏–ø—Ç–æ:\n{crypto_requisites}"
                )

            markup = create_action_keyboard(order_data['id'])

            if screenshot_id:
                try:
                    await bot.send_photo(
                        chat_id=message.chat.id,
                        photo=screenshot_id,
                        caption=response,
                        reply_markup=markup
                    )
                except Exception as e:
                    await message.reply(
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {str(e)}"
                    )
            else:
                await message.reply(response, reply_markup=markup)
        else:
            await message.reply("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ó–∞—è–≤–∫–∞ #123'")

# –•–µ–Ω–¥–ª–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ Heleket
@dp.message_handler(lambda message: message.text.startswith("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å #"))
async def refresh_status(message: types.Message):
    from heleket_api import get_invoice_status
    try:
        order_id = int(message.text.split("#")[1].strip())
        order = get_order_by_id(order_id, is_admin=True)
        if not order:
            return await message.reply("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        uuid = order.get("uuid")
        if not uuid:
            return await message.reply("‚ö†Ô∏è –£ –∑–∞—è–≤–∫–∏ –Ω–µ—Ç UUID –≤ –±–∞–∑–µ.")

        result = get_invoice_status(uuid)
        status = result.get("result", {}).get("status")
        if not status:
            return await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç API.")

        if status in ["paid", "paid_over"]:
            await message.reply(f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}.\n–°—Ç–∞—Ç—É—Å: `{status}`", parse_mode="Markdown")
        else:
            await message.reply(f"üìå –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{order_id}: `{status}`", parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@dp.message_handler(lambda message: message.text.startswith("–û–¥–æ–±—Ä–∏—Ç—å #"))
async def approve_order(message: types.Message):
    try:
        order_id = int(message.text.split("#")[1].strip())
        order_data = get_order_by_id(order_id, is_admin=True)
        if order_data:
            update_order_status(order_id, "confirmed")
            await bot.send_message(
                chat_id=order_data['user_id'],
                text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
            )
            await message.reply(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –æ–¥–æ–±—Ä–µ–Ω–∞.", reply_markup=get_main_menu(message.from_user.id))
        else:
            await message.reply("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@dp.message_handler(lambda message: message.text.startswith("–û—Ç–∫–ª–æ–Ω–∏—Ç—å #"))
async def reject_order_start(message: types.Message, state: FSMContext):
    try:
        order_id = int(message.text.split("#")[1].strip())
        await state.update_data(order_id=order_id)
        await RejectOrderStates.waiting_for_reason.set()
        await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:", reply_markup=types.ReplyKeyboardRemove())
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(state=RejectOrderStates.waiting_for_reason)
async def reject_order_reason(message: types.Message, state: FSMContext):
    reason = message.text
    state_data = await state.get_data()
    order_id = state_data['order_id']
    order_data = get_order_by_id(order_id, is_admin=True)
    if order_data:
        update_order_status(order_id, "rejected")
        await bot.send_message(
            chat_id=order_data['user_id'],
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {reason}"
        )
        await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}.", reply_markup=get_main_menu(message.from_user.id))
    else:
        await message.reply("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu(message.from_user.id))
    await state.finish()
