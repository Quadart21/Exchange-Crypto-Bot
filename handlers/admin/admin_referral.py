from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import dp, bot, ADMIN_ID
from database.db import (
    update_global_referral_percentage,
    set_personal_referral_percentage,
    get_referrals,
    get_withdrawal_requests,
    approve_withdrawal_request,
    reject_withdrawal_request,
    get_withdrawal_amount
)
from keyboards.main_menu import admin_panel_menu
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReferralStates(StatesGroup):
    waiting_for_global_percentage = State()
    waiting_for_user_id = State()
    waiting_for_personal_percentage = State()

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
@dp.message_handler(lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏")
async def referral_management(message: types.Message):
    if str(message.from_user.id) not in ADMIN_ID.split(","):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç"))
    keyboard.add(KeyboardButton("‚úè –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç"))
    keyboard.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"))
    keyboard.add(KeyboardButton("üîé –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"))
    keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))

    await message.reply("‚öô *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π*", reply_markup=keyboard, parse_mode="Markdown")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—â–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
@dp.message_handler(lambda message: message.text == "üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç")
async def ask_global_percentage(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    await ReferralStates.waiting_for_global_percentage.set()

@dp.message_handler(state=ReferralStates.waiting_for_global_percentage)
async def set_global_percentage(message: types.Message, state: FSMContext):
    try:
        new_percentage = float(message.text)
        update_global_referral_percentage(new_percentage)
        await message.reply(f"‚úÖ –ù–æ–≤—ã–π –æ–±—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {new_percentage}%")
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.finish()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
@dp.message_handler(lambda message: message.text == "‚úè –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç")
async def ask_user_id(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await ReferralStates.waiting_for_user_id.set()

@dp.message_handler(state=ReferralStates.waiting_for_user_id)
async def ask_personal_percentage(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await ReferralStates.waiting_for_personal_percentage.set()
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

@dp.message_handler(state=ReferralStates.waiting_for_personal_percentage)
async def set_personal_percentage(message: types.Message, state: FSMContext):
    try:
        percentage = float(message.text)
        data = await state.get_data()
        user_id = data["user_id"]
        set_personal_referral_percentage(user_id, percentage)
        await message.reply(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç {percentage}% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.finish()

# –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
async def list_referrals(message: types.Message):
    referrals = get_referrals()
    if not referrals:
        await message.reply("‚úÖ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
        return

    text = "üìã *–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n\n"
    for ref in referrals:
        text += f"üë§ `{ref[0]}` ({ref[1]}) –ø—Ä–∏–≥–ª–∞—Å–∏–ª üë• `{ref[2]}` ({ref[3]})\n"

    await message.reply(text, parse_mode="Markdown")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—ã–≤–æ–¥
@dp.message_handler(lambda message: message.text == "üîé –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥")
async def show_withdraw_requests(message: types.Message):
    requests = get_withdrawal_requests()
    
    if not requests:
        await message.reply("‚úÖ –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç.")
        return

    for req in requests:
        request_id, user_id, amount, requisites = req  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_withdraw:{request_id}:{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw:{request_id}:{user_id}")
        )

        text = f"üîé *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:*\n" \
               f"üìå ID: `{request_id}`\n" \
               f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n" \
               f"üí∞ –°—É–º–º–∞: `{amount} USDT`\n" \
               f"üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã: `{requisites}`\n"

        await message.reply(text, parse_mode="Markdown", reply_markup=keyboard)



@dp.callback_query_handler(lambda call: call.data.startswith("approve_withdraw"))
async def approve_withdrawal_callback(call: types.CallbackQuery):
    _, request_id, user_id = call.data.split(":")
    request_id, user_id = int(request_id), int(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∑–∞—è–≤–∫–∏
    amount = get_withdrawal_amount(request_id)
    if amount is None:
        await call.answer("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    approve_withdrawal_request(request_id)

    # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –Ω–∞ —Å—É–º–º—É {amount} USDT –æ–¥–æ–±—Ä–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–∫–æ—Ä–æ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await call.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –Ω–∞ —Å—É–º–º—É {amount} USDT –æ–¥–æ–±—Ä–µ–Ω–∞.", parse_mode="Markdown")
    await call.answer("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")

@dp.callback_query_handler(lambda call: call.data.startswith("reject_withdraw"))
async def reject_withdrawal_callback(call: types.CallbackQuery):
    _, request_id, user_id = call.data.split(":")
    request_id, user_id = int(request_id), int(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∑–∞—è–≤–∫–∏
    amount = get_withdrawal_amount(request_id)
    if amount is None:
        await call.answer("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    reject_withdrawal_request(request_id)

    # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –Ω–∞ —Å—É–º–º—É {amount} USDT –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await call.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –Ω–∞ —Å—É–º–º—É {amount} USDT –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", parse_mode="Markdown")
    await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
