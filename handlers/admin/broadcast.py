from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from config import dp, bot, ADMIN_ID
from database.db import create_connection, get_operator_id_by_telegram_id
from keyboards.main_menu import get_broadcast_menu, get_back_menu, get_main_menu

class BroadcastStates(StatesGroup):
    select_type = State()
    user_search = State()
    message_content = State()
    confirm_send = State()

@dp.message_handler(Text(equals="üîô –ù–∞–∑–∞–¥", ignore_case=True), state="*")
async def cancel_state_and_return_to_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.reply("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu(message.from_user.id))


@dp.message_handler(lambda message: message.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: types.Message):
    if str(message.from_user.id) == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        # –ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=get_broadcast_menu())
        await BroadcastStates.select_type.set()
    elif get_operator_id_by_telegram_id(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        # –ö–æ–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_back_menu())
        await BroadcastStates.user_search.set()
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")

@dp.message_handler(state=BroadcastStates.select_type)
async def broadcast_type_handler(message: types.Message, state: FSMContext):
    if message.text == "üë§ –û–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é":
        await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_back_menu())
        await BroadcastStates.user_search.set()
    elif message.text == "üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º":
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è HTML-—Ç–µ–≥–∏):", reply_markup=get_back_menu())
        await BroadcastStates.message_content.set()
    elif message.text == "–ù–∞–∑–∞–¥":
        await cancel_state_and_return_to_menu(message, state)
    else:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=get_broadcast_menu())

@dp.message_handler(state=BroadcastStates.user_search)
async def user_search_handler(message: types.Message, state: FSMContext):
    user_identifier = message.text.strip()
    conn = create_connection()
    cursor = conn.cursor()

    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username
    cursor.execute("SELECT telegram_id FROM users WHERE telegram_id = ? OR username = ?", 
                   (user_identifier, user_identifier))
    result = cursor.fetchone()
    conn.close()

    if result:
        user_id = result[0]
        await state.update_data(user_id=user_id)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è HTML-—Ç–µ–≥–∏):", reply_markup=get_back_menu())
        await BroadcastStates.message_content.set()
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=get_back_menu())

@dp.message_handler(state=BroadcastStates.message_content, content_types=types.ContentTypes.ANY)
async def message_content_handler(message: types.Message, state: FSMContext):
    await state.update_data(content=message)
    confirm_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    confirm_menu.add(
        types.KeyboardButton("‚úÖ –î–∞"),
        types.KeyboardButton("‚ùå –ù–µ—Ç"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )

    await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?", reply_markup=confirm_menu)
    await BroadcastStates.confirm_send.set()

@dp.message_handler(state=BroadcastStates.confirm_send)
async def confirm_send_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    content = data.get("content")
    user_id = data.get("user_id", None)

    if message.text == "‚úÖ –î–∞":
        conn = create_connection()
        cursor = conn.cursor()

        if user_id:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(user_id, content.text, parse_mode="HTML")
                await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", reply_markup=get_back_menu())
            except Exception as e:
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        else:
            # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —ç—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
            await message.reply("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=get_back_menu())

        conn.close()
        await state.finish()

    elif message.text in ["‚ùå –ù–µ—Ç", "–ù–∞–∑–∞–¥"]:
        await message.reply("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_back_menu())
        await state.finish()
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
