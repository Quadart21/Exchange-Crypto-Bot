from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import dp
from database.db import get_user_role, set_markup_value
from keyboards.main_menu import admin_panel_menu



class MarkupFSM(StatesGroup):
    choosing_type = State()
    entering_value = State()


# –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–ª—é—á–∏ –≤ –ë–î
markup_keys = {
    "–ö—É–ø–∏—Ç—å USDT/USDC": "markup_buy_usd",
    "–ö—É–ø–∏—Ç—å –¥—Ä—É–≥–∏–µ": "markup_buy_other",
    "–ü—Ä–æ–¥–∞—Ç—å USDT/USDC": "markup_sell_usd",
    "–ü—Ä–æ–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ": "markup_sell_other"
}

@dp.message_handler(lambda message: message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É", "–ò–∑–º–µ–Ω–∏—Ç—å –ü—Ä–æ—Ü–µ–Ω—Ç"])
async def markup_start(msg: types.Message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.text} –æ—Ç ID {msg.from_user.id}")
    
    if get_user_role(msg.from_user.id) != 'admin':
        print("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω. –ü—Ä–µ—Ä—ã–≤–∞–µ–º.")
        return

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for label in markup_keys:
        kb.add(types.KeyboardButton(label))
    kb.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    print("[DEBUG] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Ü–µ–Ω–æ–∫")
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await MarkupFSM.choosing_type.set()

# –í—ã–±–æ—Ä —Ç–∏–ø–∞
@dp.message_handler(lambda m: m.text in markup_keys, state=MarkupFSM.choosing_type)
async def choose_type(msg: types.Message, state: FSMContext):
    await state.update_data(key=markup_keys[msg.text])
    await msg.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç (–º–æ–∂–Ω–æ —Å –º–∏–Ω—É—Å–æ–º) –¥–ª—è ¬´{msg.text}¬ª:")
    await MarkupFSM.entering_value.set()

# –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è
@dp.message_handler(state=MarkupFSM.entering_value)
async def enter_value(msg: types.Message, state: FSMContext):
    try:
        value = float(msg.text.replace(",", "."))
    except:
        return await msg.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: -3 –∏–ª–∏ 5.5")

    data = await state.get_data()
    set_markup_value(data["key"], value)
    await msg.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}%")
    await state.finish()

# –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(Text(equals="üîô –ù–∞–∑–∞–¥"), state="*")
async def back_to_admin_panel(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer("üîß –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_panel_menu())
