from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import InputFile
from config import dp, bot
from database.db import get_user_orders, get_user_data
from keyboards.main_menu import profile_menu, get_main_menu


# –ö–æ–º–∞–Ω–¥–∞ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.message_handler(lambda message: message.text.strip().lower() == "üë§ –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data:
        await message.reply("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=profile_menu)
        return

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photos = await bot.get_user_profile_photos(user_id)
    avatar = None
    if photos.total_count > 0:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        avatar = photos.photos[0][-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    response_text = (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"üÜî *ID*: `{user_data[0]}`\n"
        f"üë§ *–ò–º—è*: {user_data[1]}\n"
    )

    if avatar:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=avatar.file_id,
            caption=response_text,
            reply_markup=profile_menu,
            parse_mode="Markdown",
        )
    else:
        # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.reply(response_text, reply_markup=profile_menu, parse_mode="Markdown")


# –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫
@dp.message_handler(Text(equals="–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫"))
async def order_history_handler(message: types.Message):
    user_id = message.from_user.id
    orders = get_user_orders(user_id)

    if not orders:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=profile_menu)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞—è–≤–∫–∞–º–∏
    response_text = "üìã *–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫:*\n\n"
    for i, order in enumerate(orders[:10], start=1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
        order_type = "–ö—É–ø–∏—Ç—å" if order[0].lower() == "buy" else "–ü—Ä–æ–¥–∞–∂–∞" if order[0].lower() == "sell" else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        response_text += (
            f"üîπ *–ó–∞—è–≤–∫–∞ {i}:*\n"
            f"   ‚ñ™Ô∏è *–¢–∏–ø*: {order_type}\n"
            f"   ‚ñ™Ô∏è *–°—É–º–º–∞*: {order[1]} BYN\n"
            f"   ‚ñ™Ô∏è *–ö—É—Ä—Å*: {order[2]}\n"
            f"   ‚ñ™Ô∏è *–ò—Ç–æ–≥*: {order[3]} BYN\n"
            f"   ‚ñ™Ô∏è *–°—Ç–∞—Ç—É—Å*: {order[4]}\n"
            f"   ‚ñ™Ô∏è *–î–∞—Ç–∞*: {order[5]}\n\n"
        )

    await message.reply(response_text, parse_mode="Markdown", reply_markup=profile_menu)


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@dp.message_handler(Text(equals="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def back_to_main(message: types.Message):
    await message.reply("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu(message.from_user.id))
