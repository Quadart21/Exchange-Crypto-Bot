from aiogram import types
import aiohttp
import logging
from config import dp, bot, CHANNEL_ID, NOWNODES_API_KEY
from keyboards.main_menu import operator_menu, get_main_menu
from database.db import (
    get_active_orders, 
    get_username_by_user_id, 
    get_order_by_id, 
    update_order_status, 
    get_operator_id_by_telegram_id, 
    get_requisites_by_operator,
    get_operators
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏
ALLOWED_STATUSES = ['screenshot_uploaded', 'hash_provided']

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
class RejectOrderStates(StatesGroup):
    waiting_for_reason = State()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –∑–∞—è–≤–∫–æ–π
def create_action_keyboard(order_id):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(f"–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É #{order_id}"))
    keyboard.add(KeyboardButton(f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #{order_id}"))
    keyboard.add(KeyboardButton("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"))
    return keyboard

class ReviewStates(StatesGroup):
    waiting_for_review = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏
def create_active_orders_keyboard(orders):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for order in orders:
        order_id = order[0]
        button_text = f"–ó–∞—è–≤–∫–∞ #{order_id}: {order[2]}, {order[3]} {order[4]}"
        keyboard.add(KeyboardButton(button_text))
    keyboard.add(KeyboardButton("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"))
    return keyboard

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda message: message.text == "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
async def operator_interface(message: types.Message):
    await message.reply(
        "üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=operator_menu()
    )

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
@dp.message_handler(lambda message: message.text == "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def show_active_orders(message: types.Message):
    telegram_id = message.from_user.id
    operator_id = get_operator_id_by_telegram_id(telegram_id)

    if operator_id is None:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä.", reply_markup=get_main_menu(message.from_user.id))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    operators = get_operators()
    operator_data = next((op for op in operators if op[0] == operator_id), None)

    if not operator_data:
        await message.reply("‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu(message.from_user.id))
        return

    if operator_data[3] == "inactive":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await message.reply("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—è–≤–∫–∞–º, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à —Å—Ç–∞—Ç—É—Å: `inactive`.", parse_mode="Markdown", reply_markup=operator_menu())
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    orders = get_active_orders(operator_id)
    if orders:
        keyboard = create_active_orders_keyboard(orders)
        await message.reply("üîî *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:*", parse_mode="Markdown", reply_markup=keyboard)
    else:
        await message.reply("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.", reply_markup=operator_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ—Å—è —Å "–ó–∞—è–≤–∫–∞ #"


async def get_trx_transaction_info(tx_hash: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Tronscan API.
    –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è TRC-20, TRX, USDT –≤ —Å–µ—Ç–∏ TRON.
    """
    url = f"https://apilist.tronscan.org/api/transaction-info?hash={tx_hash}"

    logging.info(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Tronscan –ø–æ —Ö—ç—à—É: {tx_hash}")
    logging.info(f"üåê URL –∑–∞–ø—Ä–æ—Å–∞: {url}")

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            logging.info(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status}")
            try:
                data = await resp.json()
                logging.info(f"üì¶ –û—Ç–≤–µ—Ç –æ—Ç Tronscan:\n{data}")
                return data if resp.status == 200 else None
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                return None           

@dp.message_handler(lambda message: message.text.startswith("–ó–∞—è–≤–∫–∞ #"))
async def view_order(message: types.Message):
    try:
        order_id = int(message.text.split("#")[1].strip().split(":")[0])
        telegram_id = message.from_user.id
        operator_id = get_operator_id_by_telegram_id(telegram_id)

        if operator_id is None:
            await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä.", reply_markup=get_main_menu(message.from_user.id))
            return

        order_data = get_order_by_id(order_id)
        if not order_data:
            await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if order_data.get('operator_id') != operator_id:
            await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
            return

        if order_data['status'] not in ['screenshot_uploaded', 'hash_provided']:
            await message.reply(
                f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –¥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ —Ö—ç—à–∞.\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {order_data['status']}.",
                reply_markup=create_action_keyboard(order_id)
            )
            return

        user_id = order_data['user_id']
        username = get_username_by_user_id(user_id) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        requisites = get_requisites_by_operator(operator_id)

        fiat_requisites = "\n".join([f"- {item[0]}: {item[1]}" for item in requisites['fiat']])
        crypto_requisites = "\n".join([f"- {item[0]}: {item[1]}" for item in requisites['crypto']])

        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        screenshot_id = None
        if order_data['details']:
            for line in order_data['details'].split("\n"):
                if line.startswith("Screenshot ID:"):
                    screenshot_id = line.split("Screenshot ID:")[-1].strip()

        # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
        response = (
            f"üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ #{order_data['id']}:\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})\n"
            f"üîÑ –¢–∏–ø: {order_data['type']}\n"
            f"üí∞ –°—É–º–º–∞: {order_data['amount']}\n"
            f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {order_data['total']}\n"
            f"üìà –°—Ç–∞—Ç—É—Å: {order_data['status']}\n"
            f"üí± –í–∞–ª—é—Ç–∞: {order_data['currency']}\n"
            f"üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {order_data['details']}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order_data.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"üí≥ *–ù–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:*\n"
            f"üìë **–§–∏–∞—Ç:**\n{fiat_requisites}\n"
        )
        await message.reply(response, reply_markup=create_action_keyboard(order_id))

        # –°–∫—Ä–∏–Ω—à–æ—Ç
        if screenshot_id:
            try:
                await bot.send_photo(chat_id=message.chat.id, photo=screenshot_id)
            except Exception as e:
                await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")
        else:
            await message.reply("üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TRON/USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Tronscan
        if any(kw in order_data["currency"].lower() for kw in ["trx", "trc", "usdt"]):
            tx_hash = None
            for line in (order_data["details"] or "").splitlines():
                if "Transaction Hash:" in line:
                    tx_hash = line.split("Transaction Hash:")[-1].strip()

            if tx_hash:
                await message.reply("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TRON-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Tronscan...")

                trx_data = await get_trx_transaction_info(tx_hash)

                if trx_data:
                    to_address = trx_data.get("toAddress", "")
                    confirmations = trx_data.get("confirmations") or trx_data.get("confirmed")
                    success = trx_data.get("contractRet") == "SUCCESS"

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                    operator_crypto_address = None
                    currency_label = order_data['currency'].split()[0].upper()
                    for name, address in requisites['crypto']:
                        if name.upper() == currency_label:
                            operator_crypto_address = address
                            break

                    if to_address.lower() == (operator_crypto_address or "").lower():
                        await message.reply(
                            f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞.\n"
                            f"üì¨ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{to_address}`\n"
                            f"üì¶ –°—Ç–∞—Ç—É—Å: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}\n"
                            f"üîÅ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {confirmations}"
                        )
                    else:
                        await message.reply(
                            f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n"
                            f"üßæ –ò–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{to_address}`\n"
                            f"üßæ –û–∂–∏–¥–∞–ª—Å—è: `{operator_crypto_address}`"
                        )
                else:
                    await message.reply("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ Tronscan.")
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ó–∞—è–≤–∫–∞ #123'")


# –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@dp.message_handler(lambda message: message.text.startswith("–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É #"))
async def approve_order(message: types.Message):
    try:
        order_id = int(message.text.split("#")[1].strip())
        telegram_id = message.from_user.id
        operator_id = get_operator_id_by_telegram_id(telegram_id)

        if operator_id is None:
            await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä.", reply_markup=get_main_menu(message.from_user.id))
            return

        order_data = get_order_by_id(order_id)
        if not order_data:
            await message.reply("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu(message.from_user.id))
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        if order_data['status'] not in ALLOWED_STATUSES:
            await message.reply(
                f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –¥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ —Ö—ç—à–∞.\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {order_data['status']}.",
                reply_markup=get_main_menu(message.from_user.id)
            )
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        update_order_status(order_id, "confirmed", operator_id)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = order_data['user_id']
        await bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
        )

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        review_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        review_keyboard.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
        await bot.send_message(
            chat_id=user_id,
            text="–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞?",
            reply_markup=review_keyboard
        )

        # –û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"))
        await message.reply(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –æ–¥–æ–±—Ä–µ–Ω–∞.", reply_markup=keyboard)
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_menu(message.from_user.id))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
@dp.message_handler(lambda message: message.text == "–î–∞")
async def ask_for_review(message: types.Message, state: FSMContext):
    await ReviewStates.waiting_for_review.set()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞.", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == "–ù–µ—Ç")
async def decline_review(message: types.Message):
    await message.reply("–°–ø–∞—Å–∏–±–æ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.", reply_markup=get_main_menu(message.from_user.id))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
@dp.message_handler(state=ReviewStates.waiting_for_review)
async def publish_review(message: types.Message, state: FSMContext):
    review_text = message.text

    try:
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ
        await bot.send_message(chat_id=CHANNEL_ID, text=f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤:\n\n{review_text}")
        await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.", reply_markup=get_main_menu(message.from_user.id))
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤: {e}", reply_markup=get_main_menu(message.from_user.id))

    await state.finish()

# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@dp.message_handler(lambda message: message.text.startswith("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #"))
async def reject_order_start(message: types.Message, state: FSMContext):
    try:
        order_id = int(message.text.split("#")[1].strip())
        telegram_id = message.from_user.id
        operator_id = get_operator_id_by_telegram_id(telegram_id)

        if operator_id is None:
            await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä.", reply_markup=get_main_menu(message.from_user.id))
            return

        order_data = get_order_by_id(order_id)
        if not order_data:
            await message.reply("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu(message.from_user.id))
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        if order_data['status'] not in ALLOWED_STATUSES:
            await message.reply(
                f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –¥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ —Ö—ç—à–∞.\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {order_data['status']}.",
                reply_markup=get_main_menu(message.from_user.id)
            )
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –∑–∞—è–≤–∫–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã
        await state.update_data(order_id=order_id)
        await RejectOrderStates.waiting_for_reason.set()
        await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:", reply_markup=types.ReplyKeyboardRemove())
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_menu(message.from_user.id))

@dp.message_handler(state=RejectOrderStates.waiting_for_reason)
async def reject_order_reason(message: types.Message, state: FSMContext):
    reason = message.text
    state_data = await state.get_data()
    order_id = state_data['order_id']

    telegram_id = message.from_user.id
    operator_id = get_operator_id_by_telegram_id(telegram_id)

    if operator_id is None:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä.", reply_markup=get_main_menu(message.from_user.id))
        await state.finish()
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    update_order_status(order_id, "rejected", operator_id)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order_data = get_order_by_id(order_id)
    user_id = order_data['user_id']
    await bot.send_message(
        chat_id=user_id,
        text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {reason}"
    )

    # –û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"))
    await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}.", reply_markup=keyboard)
    await state.finish()
