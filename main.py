import asyncio
from aiogram import types
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from config import dp, bot, logger
from database.db import initialize_db, get_user_role, get_user_username, update_user_username, user_exists, register_user
from keyboards.main_menu import get_main_menu
from handlers.user_handlers_buy import *
from handlers.user_handllers_sell import *
from handlers.admin.operator_handlers import *
from handlers.admin.crypto_wallet import *
from handlers.admin.fiat_wallet import *
from handlers.profile_handlers import *
from handlers.admin.rules_handlers import *
from handlers.user_rules_handlers import *
from handlers.operator_handlers import *
from handlers.admin.operator_crypto import *
from handlers.admin.broadcast import *
from handlers.admin.order_admin import *
from handlers.admin.admin_requisites import *
from handlers.admin.admin_markup import *
from handlers.admin.statistics_handlers import *
import random
from datetime import datetime, timedelta
from aiogram.types import InputFile
from fastapi import FastAPI, Request, HTTPException
import uvicorn
from heleket_api import verify_webhook
import sys
from webhook_handler import router as webhook_router

sys.stdout.reconfigure(encoding='utf-8')

# –ù–æ–≤—ã–π FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

app.include_router(webhook_router)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ø—á –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
captcha_data = {}
banned_users = {}

# –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Å–º–∞–π–ª–æ–≤
EMOJI_DESCRIPTIONS = {  # –û–ø–∏—Å–∞–Ω–∏—è –Ω–∞—Ä–æ—á–Ω–æ —Å –æ–ø–µ—á–∞—Ç–∫–æ–π, —á—Ç–æ–±—ã —É—Å–ª–æ–∂–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä
    "üî•": "–æ–≥–æ–Ω—å (–Ω–µ —Ç—É—à–∏)",  
    "üíÄ": "–º–µ—Ä—Ç–≤—è—á–æ–∫ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–ª–æ—Ö–æ–π –¥–µ–Ω—å)",  
    "üëë": "–∫–æ—Ä–æ–Ω—É (–Ω–µ –¥–ª—è –ó–æ–ª—É—à–∫–∏)",  
    "ü¶∏": "—Å—É–ø–µ—Ä–º–µ–Ω–∞ (–Ω–æ –±–µ–∑ –ø–ª–∞—â–∞)",  
    "üé∏": "–≥–∏—Ç–∞—Ä—É (—Ä–≤–∞—Ç—å —Å—Ç—Ä—É–Ω—ã)",  
    "ü§ñ": "—Ä–æ–±–æ—Ç–∞ (–Ω–µ –ê–ª–∏—Å—É, —á–µ—Å—Ç–Ω–æ)",  
    "üëΩ": "–ø—Ä–∏—à–µ–ª—å—Ü–∞ (–Ω–µ –∑–æ–≤–∏ –Ω–∞ —É–∂–∏–Ω)",  
    "üï∂Ô∏è": "–æ—á–∫–∏ (—á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —Å–ª–µ–∑—ã)",  
    "üß®": "–ø–µ—Ç–∞—Ä–¥—É (–Ω–µ –≤ —Ä—É–∫–∏)",  
    "üçï": "–ø–∏—Ü—Ü—É (–∞ –≥–¥–µ –º–æ—è?)",  
    "üçå": "–±–∞–Ω–∞–Ω (—Å–∫–æ–ª—å–∑–∫–∏–π —Ç–∏–ø)",  
    "üç©": "–ø–æ–Ω—á–∏–∫ (–¥—ã—Ä–∫–∞ –æ—Ç –±—É–±–ª–∏–∫–∞)",  
    "üöΩ": "—Ç—Ä–æ–Ω (–¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π)",  
    "üßª": "—Ä—É–ª–æ–Ω (–∑–æ–ª–æ—Ç–æ 2020)",  
    "üé≤": "–∫—É–±–∏–∫ (–Ω–µ –±—É–¥—å –∑–º–µ–µ–π)",  
    "ü™ì": "—Ç–æ–ø–æ—Ä (–Ω–µ –¥–ª—è –±–∞–Ω–∏)",  
    "üßä": "–ª—ë–¥ (Diamond hands)",  
    "üõ∏": "—Ç–∞—Ä–µ–ª–∫—É (–º–∞–º–∫–∏–Ω—É –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å)",  
    "üéÆ": "–¥—Ä–æ—á–∫—É (–≥–µ–π–º–ø–∞–¥–Ω—É—é)",  
    "üìû": "—Ç—Ä—É–±—É (–∞–ª–ª–æ, —ç—Ç–æ –±–∞–∑–∞?)",  
    "üí£": "–±–æ–º–±—É (–Ω–µ –∫–ª–∏–∫–∞–π)",  
    "ü™ë": "—Å—Ç—É–ª (–¥–ª—è —Å—Ç—Ä–∏–º–æ–≤)",  
    "üî´": "–≤–æ–¥–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç (–Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ)",  
    "üß≤": "–º–∞–≥–Ω–∏—Ç (–¥–ª—è ex –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)",  
    "üïπÔ∏è": "–¥–∂–æ–π—Å—Ç–∏–∫ (–≤—Å—Ç–∞–≤—å –º–æ–Ω–µ—Ç–∫—É)",  
    "üéØ": "–≤ —è–±–ª–æ—á–∫–æ (–∏–ª–∏ –≤ –¥–∞—Ä—Ç—Å)",  
    "üõå": "–ª–µ–∂–∞–∫ (—Ä–∞–±–æ—Ç–∞ –ø–æ–¥–æ–∂–¥—ë—Ç)",  
    "üßØ": "–æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—å (–Ω–∞ –≤—Å—è–∫–∏–π)",  
    "ü™®": "–∫–∞–º–µ–Ω—å (–Ω–æ–∂–Ω–∏—Ü—ã –±—å—é—Ç)",  
    "üß∏": "–º–∏—à–∫—É (–Ω–æ –Ω–µ —Ç–æ–≥–æ)",  
    "ü™£": "–≤–µ–¥—Ä–æ (–Ω–µ –¥–ª—è –∫—Ä–∞–±–∞)",  
    "üõí": "—Ç–µ–ª–µ–∂–∫—É (–±–µ–≥–∏ –≤ –ê—à–∞–Ω)",  
    "üì∏": "—Ñ–æ—Ç–æ (–±–µ–∑ –ø—Ä–∞–≤–æ–∫)",  
    "üíä": "—Ç–∞–±–ª–µ—Ç–∫—É (—Å–∏–Ω—é—é –∏–ª–∏ –∫—Ä–∞—Å–Ω—É—é?)",  
    "üßÉ": "–ø–∞–∫–µ—Ç (—Å–æ–∫ ‚Äî —Ä–æ—Ç–æ–∑–µ—è–º –±–æ–∫)",  
    "ü™†": "–≤–∞–Ω—Ç—É–∑ (—Å–ø–∞—Å–∏—Ç–µ–ª—å —Ç—Ä—É–±)",  
    "üéà": "—à–∞—Ä–∏–∫ (–ª–æ–ø–Ω–∏ –∏ –∏—Å–ø—É–≥–∞–π –∫–æ—Ç–∞)",  
    "üõü": "–∫—Ä—É–≥ (—Å–ø–∞—Å—ë—Ç –∏–ª–∏ —É—Ç–æ–ø–∏—Ç)",  
    "üß®": "—Ö–ª–æ–ø—É—à–∫—É (–Ω–æ–≤—ã–π –≥–æ–¥ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è)",  
    "ü™ú": "–ª–µ—Å—Ç–Ω–∏—Ü—É (–≤ –Ω–µ–±–æ –∏–ª–∏ –≤ –ø–æ–¥–≤–∞–ª)",  
    "üìØ": "—Ä–æ–∂–æ–∫ (–Ω–µ –¥–ª—è –º—É–∑—ã–∫–∏)",  
    "üïØÔ∏è": "—Å–≤–µ—á–∫—É (–±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)"  
}

class BanCheckMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if is_user_banned(message.from_user.id):
            unban_time = banned_users[message.from_user.id]['unban_time']
            remaining_time = unban_time - datetime.now()
            minutes = int(remaining_time.total_seconds() // 60)
            await message.answer(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {minutes} –º–∏–Ω—É—Ç –∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–∞–ø—á—É.")
            raise CancelHandler()  # –û—Ç–º–µ–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

    async def on_pre_process_callback_query(self, call: types.CallbackQuery, data: dict):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if is_user_banned(call.from_user.id):
            unban_time = banned_users[call.from_user.id]['unban_time']
            remaining_time = unban_time - datetime.now()
            minutes = int(remaining_time.total_seconds() // 60)
            await call.answer(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {minutes} –º–∏–Ω—É—Ç.", show_alert=True)
            raise CancelHandler()  # –û—Ç–º–µ–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

async def start_aiogram():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    initialize_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await dp.skip_updates()

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

def generate_captcha():
    # –í—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–º–∞–π–ª–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    available_emojis = list(EMOJI_DESCRIPTIONS.keys())
    captcha_emojis = random.sample(available_emojis, 6)
    correct_answer = captcha_emojis[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    description = EMOJI_DESCRIPTIONS[correct_answer]
    question = f"–í—ã–±–µ—Ä–∏—Ç–µ {description}"
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    random.shuffle(captcha_emojis)
    
    return question, captcha_emojis, correct_answer

def is_user_banned(user_id):
    if user_id in banned_users:
        if datetime.now() < banned_users[user_id]['unban_time']:
            return True
        else:
            del banned_users[user_id]
    return False

def setup_middleware(dp):
    middleware = BanCheckMiddleware()
    dp.setup_middleware(middleware)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    telegram_id = message.from_user.id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
    question, emojis, correct_answer = generate_captcha()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏
    captcha_data[telegram_id] = {
        'correct_answer': correct_answer,
        'attempts': 0,
        'question': question
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    buttons = [
        types.InlineKeyboardButton(text=emoji, callback_data=f"captcha_{emoji}")
        for emoji in emojis
    ]
    keyboard.add(*buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É
    await message.answer(
        "üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç:\n"
        f"{question}",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda call: call.data.startswith("captcha_"))
async def process_captcha(call: types.CallbackQuery):
    telegram_id = call.from_user.id
    user_answer = call.data.replace("captcha_", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if telegram_id not in captcha_data:
        await call.answer("–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏
    data = captcha_data[telegram_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if user_answer == data['correct_answer']:
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏
        del captcha_data[telegram_id]
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞—Ä—Ç–∞
        await successful_start(call.message, call.from_user)
        await call.answer("‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        data['attempts'] += 1
        remaining_attempts = 5 - data['attempts']
        
        if data['attempts'] >= 5:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 30 –º–∏–Ω—É—Ç
            unban_time = datetime.now() + timedelta(minutes=30)
            banned_users[telegram_id] = {
                'unban_time': unban_time,
                'attempts': data['attempts']
            }
            del captcha_data[telegram_id]
            
            await call.answer("‚ùå –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç.", show_alert=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            logger.warning(f"User {telegram_id} banned for 30 minutes due to failed captcha attempts")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
            question, emojis, correct_answer = generate_captcha()
            data['correct_answer'] = correct_answer
            data['question'] = question
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup(row_width=3)
            buttons = [
                types.InlineKeyboardButton(text=emoji, callback_data=f"captcha_{emoji}")
                for emoji in emojis
            ]
            keyboard.add(*buttons)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–∞–ø—á–µ–π
            await call.message.edit_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}\n"
                f"{question}",
                reply_markup=keyboard
            )
            await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!")


support_link = "https://t.me/bitby_dev"


async def successful_start(message: types.Message, user: types.User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    telegram_id = user.id
    name = user.first_name
    username = user.username

    print(f"üõ† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")  # –û—Ç–ª–∞–¥–∫–∞

    if not user_exists(telegram_id):
        print("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...")
        register_user(telegram_id, name, username)
    else:
        existing_username = get_user_username(telegram_id)
        if username != existing_username:
            print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º username –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: "
                  f"{existing_username} ‚Üí {username}")
            update_user_username(telegram_id, username)

    role = get_user_role(telegram_id)
    print(f"üîç –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {role}")  # –û—Ç–ª–∞–¥–∫–∞

    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n\n"
        "üîí –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.\n\n"
        "‚ö° –° –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ:\n"
        "- –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É.\n"
        "- –ü—Ä–æ–¥–∞—Ç—å —Å–≤–æ–∏ –∞–∫—Ç–∏–≤—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏.\n\n"
        "üíº –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–¥ –Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞—â–∏—Ç–æ–π, –∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n"
        f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî [–Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É]({support_link})"
    )

    image_path = "img/welcome.jpg"

    try:
        photo = InputFile(image_path)
        await message.answer_photo(
            photo=photo,
            caption=welcome_text,
            reply_markup=get_main_menu(telegram_id, role),
            parse_mode="Markdown"
        )
        print(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ "
              f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
    except FileNotFoundError:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞.")
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu(telegram_id, role),
            parse_mode="Markdown"
        )


@dp.callback_query_handler()
async def debug_callback_query(call: types.CallbackQuery):
    print(f"üì• –ü–æ–ª—É—á–µ–Ω callback_query: {call.data}")
    await call.answer("Callback –ø–æ–ª—É—á–µ–Ω!")


# –ù–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ Heleket webhook
# –ó–∞–ø—É—Å–∫ aiogram + fastapi
async def start_bot():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    initialize_db()
    await dp.skip_updates()
    await dp.start_polling(bot)

async def start_webhook_server():
    config = uvicorn.Config(app, host="45.8.147.242", port=8000, log_level="info")
    server = uvicorn.Server(config)
    await server.serve()

async def main():
    setup_middleware(dp)
    await asyncio.gather(
        start_bot(),
        start_webhook_server()
    )

if __name__ == "__main__":
    print("[DEBUG] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    import handlers.admin.admin_markup  # üí• –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
    asyncio.run(main())
